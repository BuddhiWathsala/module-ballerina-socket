/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Socket Ballerina Generator'

configurations {
    balTools
    socketBallerinaBirDir
    socketBallerinaJar
}

dependencies {
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':socket-native')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
}

def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def artifactSocketBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactSocketCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactSocketLibParent = file("$project.projectDir/build/lib_parent/")
def targetSocketBallerinaJar = file("$project.projectDir/target/caches/jar_cache/ballerina/socket/${project.version}/ballerina-socket-${project.version}.jar")
def targetSocketNativeJar = file("$project.rootDir/socket-native/build/libs/socket-native-${project.version}.jar")
def targetSocketTestsJar = file("$project.rootDir/socket-test-utils/build/libs/socket-test-utils-${project.version}.jar")

task ballerinaBuild {
    dependsOn unzip
    inputs.dir file(project.projectDir)
    doLast {
        def originalConfig = ballerinaConfigFile.text
        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        ballerinaConfigFile.text = newConfig

        def distributionBinPath =  project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat build --code-coverage -c -a"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina build --code-coverage -c -a "
            }
        }
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat doc -a"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina doc -a "
            }
        }

        // Populate caches
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactSocketCacheParent/caches/bir/ballerina/socket/${project.version}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactSocketCacheParent/caches/balo/ballerina/socket/${project.version}")
        }
        copy {
            from file("$project.projectDir/Ballerina.toml")
            into file("$artifactSocketCacheParent/caches/jar/ballerina/socket/${project.version}")
        }
        copy {
            from file("$project.projectDir/target/caches/bir_cache")
            into file("$artifactSocketCacheParent/caches/bir")
        }
        copy {
            from file("$project.projectDir/target/balo")
            into file("$artifactSocketCacheParent/caches/balo/ballerina/socket/${project.version}")
        }
        copy {
            from targetSocketBallerinaJar
            into file("$artifactSocketCacheParent/caches/jar/ballerina/socket/${project.version}")
        }

        copy {
            from targetSocketBallerinaJar
            into file("$artifactSocketLibParent/libs")
        }
        copy {
            from targetSocketNativeJar
            into file("$artifactSocketLibParent/libs")
        }
        copy {
            from targetSocketTestsJar
            into file("$artifactSocketLibParent/libs")
        }
        copy {
            from file("$project.projectDir/target/apidocs/socket")
            into file("$project.projectDir/build/docs_parent/docs/socket")
        }
        ballerinaConfigFile.text = originalConfig
    }

    outputs.dir artifactSocketCacheParent
    outputs.dir artifactSocketBallerinaDocs
    outputs.file artifactSocketLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/BuddhiWathsala/module-ballerina-socket")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
ballerinaBuild.dependsOn ":socket-native:build"
ballerinaBuild.dependsOn ":socket-test-utils:build"
build.dependsOn ballerinaBuild
